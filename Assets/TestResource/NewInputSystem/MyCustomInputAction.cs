//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/TestResource/NewInputSystem/MyCustomInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyCustomInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyCustomInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyCustomInputAction"",
    ""maps"": [
        {
            ""name"": ""Test1"",
            ""id"": ""a0bdc322-6bda-4a9e-8973-ffa48a4f0f76"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""3b369a48-823d-42d2-95d4-8e74e00186d4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Value"",
                    ""id"": ""d2dc6d35-dfdd-4edd-a816-c64673944589"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""fdf643d4-0950-4ef8-a539-0cdded1a273e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""0488248d-31ad-45b0-a9b2-52e4924f3198"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7ad497f9-8844-43d8-b228-a88299096843"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""e39eb448-c459-4fe6-8429-69389eb6f79f"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a9e6531d-8243-498f-b88b-e30c301ca6ed"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""684d3018-6b3b-4154-b828-8792fb6b1a1e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""466e64c7-ac78-48d9-83cd-10bd964c15a6"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""c13722c5-784e-4e05-988d-574e6b3db4ed"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""7339e5b3-eb6c-4a01-9111-9349a3360f2f"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""346fad13-1257-4c8c-b662-9681f96d58ae"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Test2"",
            ""id"": ""9401007e-dab5-4993-b04a-2c8a11ca203d"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""05dcfe1f-3f8d-4941-94e1-2e66cd960bc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4505ae37-7148-4b1d-9c58-7f94ce663b8d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Test1
        m_Test1 = asset.FindActionMap("Test1", throwIfNotFound: true);
        m_Test1_Move = m_Test1.FindAction("Move", throwIfNotFound: true);
        m_Test1_Fire = m_Test1.FindAction("Fire", throwIfNotFound: true);
        // Test2
        m_Test2 = asset.FindActionMap("Test2", throwIfNotFound: true);
        m_Test2_Newaction = m_Test2.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Test1
    private readonly InputActionMap m_Test1;
    private ITest1Actions m_Test1ActionsCallbackInterface;
    private readonly InputAction m_Test1_Move;
    private readonly InputAction m_Test1_Fire;
    public struct Test1Actions
    {
        private @MyCustomInputAction m_Wrapper;
        public Test1Actions(@MyCustomInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Test1_Move;
        public InputAction @Fire => m_Wrapper.m_Test1_Fire;
        public InputActionMap Get() { return m_Wrapper.m_Test1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Test1Actions set) { return set.Get(); }
        public void SetCallbacks(ITest1Actions instance)
        {
            if (m_Wrapper.m_Test1ActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_Test1ActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_Test1ActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_Test1ActionsCallbackInterface.OnMove;
                @Fire.started -= m_Wrapper.m_Test1ActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_Test1ActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_Test1ActionsCallbackInterface.OnFire;
            }
            m_Wrapper.m_Test1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
            }
        }
    }
    public Test1Actions @Test1 => new Test1Actions(this);

    // Test2
    private readonly InputActionMap m_Test2;
    private ITest2Actions m_Test2ActionsCallbackInterface;
    private readonly InputAction m_Test2_Newaction;
    public struct Test2Actions
    {
        private @MyCustomInputAction m_Wrapper;
        public Test2Actions(@MyCustomInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Test2_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Test2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Test2Actions set) { return set.Get(); }
        public void SetCallbacks(ITest2Actions instance)
        {
            if (m_Wrapper.m_Test2ActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_Test2ActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_Test2ActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_Test2ActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_Test2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public Test2Actions @Test2 => new Test2Actions(this);
    public interface ITest1Actions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
    public interface ITest2Actions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
